uniform vec4 playerPos;
uniform vec4 playerFwd;
uniform vec4 playerRight;
uniform vec4 playerUp;
uniform vec4 playerWup;

float terrainH( in vec3 x, float t)
{
	vec3  p = x * 0.1;
	float h = sin(p.x) + sin(p.y) + sin(p.z);
	return h * 2.0;
}
float plane4d(vec4 p)
{
	return abs(p.w);
}
float sdBox( vec4 p, vec4 b )
{
  vec4 d = abs(p) - b;
  return min(max(d.x,max(d.y,max(d.z,d.w))),0.0) + length(max(d,0.0));
}
float sdSphere( vec4 p)
{
  return length(p) - 4.0;
}
float sdCappedCylinder( vec4 p, vec2 h )
{
  vec2 d = abs(vec2(length(p.xyz),p.w)) - h;
  return min(max(d.x,d.y),0.0) + length(max(d,0.0));
}

float opSubtraction( float d1, float d2 ) { return max(-d1,d2); }

float sdf(vec4 p)
{
	float c = 100.0;
	return opSubtraction(sdCappedCylinder(p, vec2(2,5)), sdCappedCylinder(p, vec2(2,3)));//sdBox(p, vec4(3,5,5,5));//opSubtraction(sdCappedCylinder(p, vec2(2,5)), sdCappedCylinder(p, vec2(2,3)));//sdBox(p, vec4(3,5,5,5));//mod(p,c)-0.5*c
}


float interesct( in vec4 ro, in vec4 rd, in float tmin, in float tmax )
{
    float t = tmin;
	int i=0;
	for( i=0; i<384; i++ )
	{
        vec4 pos = ro + t*rd;
		//float h = pos.w - terrainH( pos.xyz , t);
		//h = min(h, sdBox(pos, vec4(5,5,5,5)));
		float h = sdf(pos);

		if(h<(0.002*t) ||  t>tmax ) return t;
		t += 0.5*h;
	}

	return t;
}

vec4 calcNormal( in vec4 x, float t, float tmax)
{
    vec3 p = x.xyz;
	vec4 pos = x;
	float delta = 0.01;//00 * t / tmax;
	
	//vec3 n = vec3(terrainH(vec3(p.x + delta, p.y, p.z), 1.0) - terrainH(vec3(p.x - delta, p.y, p.z), 1.0), terrainH(vec3(p.x, p.y + delta, p.z), 1.0) - terrainH(vec3(p.x, p.y - delta, p.z), 1.0), terrainH(vec3(p.x,p.y, p.z + delta), 1.0) - terrainH(vec3(p.x, p.y, p.z - delta), 1.0));
	vec4 n = vec4(sdf(pos + delta * vec4(1,0,0,0))-sdf(pos - delta * vec4(1,0,0,0)), sdf(pos + delta * vec4(0,1,0,0))-sdf(pos - delta * vec4(0,1,0,0)), sdf(pos + delta * vec4(0,0,1,0))-sdf(pos - delta * vec4(0,0,1,0)), sdf(pos + delta * vec4(0,0,0,1)) - sdf(pos - delta * vec4(0,0,0,1)));
	n = normalize(n);

	return n;
}

vec3 render( in vec4 ro, in vec4 rd )
{
    vec4 light1 = normalize( vec4(-0.8,-0.3,0.4, 0.7) );
    // bounding plane
    float tmin = 0.0;
    float tmax = 2500.0;

	float sundot = 0.6;
	vec3 col;
    float t = interesct( ro, rd, tmin, tmax );
    if( t>tmax)
    {
		col = vec3(0.0);//vec3(135 / 255.0,206 / 255.0,235 / 255.0) * 0.8;
	}
	else
	{
        // mountains		
		vec4 pos = ro + t*rd;
        vec4 nor = normalize(calcNormal( pos, t, tmax));
        
		//col = normalize(vec3(0.074925,0.074925,0.0707625));

        // lighting		
		//float dif = clamp( dot( light1, nor ) + 0.01, 0.0, 1.0 );
		//col *= dif;
		col = vec3(1);
	}
	
	return col;
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main(void) 
{
	//xyz is ground pos, w is height
	vec2 ScreenPos = gl_TexCoord[0] - vec2(0.5,0.5);

    // camera position
	vec4 ro = playerPos;
	//ro.w = terrainH(ro.xyz, 0.0) + 1.9;
	

	//this implements a 2d scan of a 4d world, this allowes for textures etc... since color is unused, also high res
	/*
    // camera ray    
	vec4 rd = playerFwd + playerRight * ScreenPos.x - playerUp * ScreenPos.y;
    vec3 col = render( ro, rd );
	*/

	//camera ray, oo traverse 4th dimension...
	int wRes = 400;
	vec3 opacity = vec3(0);
	for(int i = 0; i < wRes; i++)
	{
		vec4 rd = playerFwd + playerRight * ScreenPos.x + playerUp * ScreenPos.y + (i - float(wRes) * 0.5) / float(wRes) * playerWup;
		vec3 result = render( ro, rd);
		//check if hit:
		opacity += result.x * hsv2rgb(vec3(i / float(wRes) * (1 - 1/3.0), 1, 1)) / float(wRes);
	}
	//hue is from red to red, this makes density onclear
	//vec3 col = hsv2rgb(vec3(opacity.x / float(wRes) * (1 - 1/3.0), 1, 1));

    gl_FragColor = vec4(opacity, 1.0 );
}
